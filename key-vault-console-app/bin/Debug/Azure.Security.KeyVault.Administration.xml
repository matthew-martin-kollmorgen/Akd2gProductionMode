<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Azure.Security.KeyVault.Administration</name>
    </assembly>
    <members>
        <member name="T:Azure.Security.KeyVault.Administration.BackupRestoreRestClient">
            <summary>Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy.</summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String)">
            <summary> Initializes a new instance of BackupRestoreRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.FullBackupAsync(System.String,Azure.Security.KeyVault.Administration.Models.SASTokenParameter,System.Threading.CancellationToken)">
            <summary> Creates a full backup using a user-provided SAS token to an Azure blob storage container. This operation is supported only by the Managed HSM service. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="azureStorageBlobContainerUri"> Azure blob shared access signature token pointing to a valid Azure blob container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the time of making this call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.FullBackup(System.String,Azure.Security.KeyVault.Administration.Models.SASTokenParameter,System.Threading.CancellationToken)">
            <summary> Creates a full backup using a user-provided SAS token to an Azure blob storage container. This operation is supported only by the Managed HSM service. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="azureStorageBlobContainerUri"> Azure blob shared access signature token pointing to a valid Azure blob container where full backup needs to be stored. This token needs to be valid for at least next 24 hours from the time of making this call. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.FullBackupStatusAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Returns the status of full backup operation. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="jobId"> The id returned as part of the backup request. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="jobId" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.FullBackupStatus(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Returns the status of full backup operation. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="jobId"> The id returned as part of the backup request. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="jobId" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.FullRestoreOperationAsync(System.String,Azure.Security.KeyVault.Administration.Models.RestoreOperationParameters,System.Threading.CancellationToken)">
            <summary> Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="restoreBlobDetails"> The Azure blob SAS token pointing to a folder where the previous successful full backup was stored. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.FullRestoreOperation(System.String,Azure.Security.KeyVault.Administration.Models.RestoreOperationParameters,System.Threading.CancellationToken)">
            <summary> Restores all key materials using the SAS token pointing to a previously stored Azure Blob storage backup folder. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="restoreBlobDetails"> The Azure blob SAS token pointing to a folder where the previous successful full backup was stored. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.RestoreStatusAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Returns the status of restore operation. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="jobId"> The Job Id returned part of the restore operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="jobId" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.RestoreStatus(System.String,System.String,System.Threading.CancellationToken)">
            <summary> Returns the status of restore operation. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="jobId"> The Job Id returned part of the restore operation. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="jobId" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.SelectiveKeyRestoreOperationAsync(System.String,System.String,Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreOperationParameters,System.Threading.CancellationToken)">
            <summary> Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob storage backup folder. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="keyName"> The name of the key to be restored from the user supplied backup. </param>
            <param name="restoreBlobDetails"> The Azure blob SAS token pointing to a folder where the previous successful full backup was stored. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="keyName" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.BackupRestoreRestClient.SelectiveKeyRestoreOperation(System.String,System.String,Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreOperationParameters,System.Threading.CancellationToken)">
            <summary> Restores all key versions of a given key using user supplied SAS token pointing to a previously stored Azure Blob storage backup folder. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="keyName"> The name of the key to be restored from the user supplied backup. </param>
            <param name="restoreBlobDetails"> The Azure blob SAS token pointing to a folder where the previous successful full backup was stored. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="keyName" /> is null. </exception>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions">
            <summary>
            Options to create or update a role definition passed to <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.CreateOrUpdateRoleDefinition(Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions,System.Threading.CancellationToken)" />
            or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.CreateOrUpdateRoleDefinitionAsync(Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.#ctor(Azure.Security.KeyVault.Administration.KeyVaultRoleScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions" /> class using a generated role definition name.
            </summary>
            <param name="roleScope">The <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" /> to which the definition applies.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.#ctor(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions" /> class using a generated role definition name.
            </summary>
            <param name="roleScope">The <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" /> to which the definition applies.</param>
            <param name="roleDefinitionName">The unique role definition name. If the named role definition is already defined it will be updated.</param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.RoleScope">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" /> to which this definition applies.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.RoleDefinitionName">
            <summary>
            Gets the unique role definition name.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.RoleName">
            <summary>
            Gets the display name of this role definition. Defaults to the <see cref="P:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.RoleDefinitionName" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.Description">
            <summary>
            Gets a description of this role definition.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.Permissions">
            <summary>
            Gets a list of permissions granted by this role definition when assigned to a principal.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.AssignableScopes">
            <summary>
            Gets a list of scopes for which this role definition can be assigned.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions.ToParameters(Azure.Security.KeyVault.Administration.KeyVaultRoleType)">
            <summary>
            Converts this instance of <see cref="T:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions" /> to a <see cref="T:Azure.Security.KeyVault.Administration.Models.RoleDefinitionProperties" /> object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal">
            <summary>
            The full backup details containing information about a specific full backup operation.
            </summary>
            <summary> Full backup operation. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal.#ctor">
            <summary> Initializes a new instance of FullBackupDetailsInternal. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal.#ctor(System.String,System.String,Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String,System.String)">
            <summary> Initializes a new instance of FullBackupDetailsInternal. </summary>
            <param name="status"> Status of the backup operation. </param>
            <param name="statusDetails"> The status details of backup operation. </param>
            <param name="error"> Error encountered, if any, during the full backup operation. </param>
            <param name="startTime"> The start time of the backup operation in UTC. </param>
            <param name="endTime"> The end time of the backup operation in UTC. </param>
            <param name="jobId"> Identifier for the full backup operation. </param>
            <param name="azureStorageBlobContainerUri"> The Azure blob storage container Uri which contains the full backup. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal.Status">
            <summary> Status of the backup operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal.StatusDetails">
            <summary> The status details of backup operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal.Error">
            <summary> Error encountered, if any, during the full backup operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal.StartTime">
            <summary> The start time of the backup operation in UTC. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal.EndTime">
            <summary> The end time of the backup operation in UTC. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal.JobId">
            <summary> Identifier for the full backup operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal.AzureStorageBlobContainerUri">
            <summary> The Azure blob storage container Uri which contains the full backup. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.KeyVaultError">
            <summary> The key vault error exception. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.KeyVaultError.#ctor">
            <summary> Initializes a new instance of KeyVaultError. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.KeyVaultError.#ctor(Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError)">
            <summary> Initializes a new instance of KeyVaultError. </summary>
            <param name="error"> The key vault server error. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.KeyVaultError.Error">
            <summary> The key vault server error. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError">
            <summary> The key vault server error. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError.#ctor">
            <summary> Initializes a new instance of KeyVaultServiceError. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError.#ctor(System.String,System.String,Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError)">
            <summary> Initializes a new instance of KeyVaultServiceError. </summary>
            <param name="code"> The error code. </param>
            <param name="message"> The error message. </param>
            <param name="innerError"> The key vault server error. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError.Code">
            <summary> The error code. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError.Message">
            <summary> The error message. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError.InnerError">
            <summary> The key vault server error. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal">
            <summary> Restore operation. </summary>
            <summary>
            The full restore details containing information about a specific full restore operation.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal.#ctor">
            <summary> Initializes a new instance of RestoreDetailsInternal. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal.#ctor(System.String,System.String,Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary> Initializes a new instance of RestoreDetailsInternal. </summary>
            <param name="status"> Status of the restore operation. </param>
            <param name="statusDetails"> The status details of restore operation. </param>
            <param name="error"> Error encountered, if any, during the restore operation. </param>
            <param name="jobId"> Identifier for the restore operation. </param>
            <param name="startTime"> The start time of the restore operation. </param>
            <param name="endTime"> The end time of the restore operation. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal.Status">
            <summary> Status of the restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal.StatusDetails">
            <summary> The status details of restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal.Error">
            <summary> Error encountered, if any, during the restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal.JobId">
            <summary> Identifier for the restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal.StartTime">
            <summary> The start time of the restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal.EndTime">
            <summary> The end time of the restore operation. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.RestoreOperationParameters">
            <summary> The RestoreOperationParameters. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RestoreOperationParameters.#ctor(Azure.Security.KeyVault.Administration.Models.SASTokenParameter,System.String)">
            <summary> Initializes a new instance of RestoreOperationParameters. </summary>
            <param name="sasTokenParameters"></param>
            <param name="folderToRestore"> The Folder name of the blob where the previous successful full backup was stored. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sasTokenParameters" /> or <paramref name="folderToRestore" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RestoreOperationParameters.SasTokenParameters">
            <summary> Gets the sas token parameters. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RestoreOperationParameters.FolderToRestore">
            <summary> The Folder name of the blob where the previous successful full backup was stored. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.RoleAssignmentCreateParameters">
            <summary> Role assignment create parameters. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RoleAssignmentCreateParameters.#ctor(Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentPropertiesInternal)">
            <summary> Initializes a new instance of RoleAssignmentCreateParameters. </summary>
            <param name="properties"> Role assignment properties. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="properties" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleAssignmentCreateParameters.Properties">
            <summary> Role assignment properties. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.RoleAssignmentFilter">
            <summary> Role Assignments filter. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RoleAssignmentFilter.#ctor">
            <summary> Initializes a new instance of RoleAssignmentFilter. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleAssignmentFilter.PrincipalId">
            <summary> Returns role assignment of the specific principal. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.RoleAssignmentListResult">
            <summary> Role assignment list operation result. </summary>
            <summary> Role assignment list operation result. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RoleAssignmentListResult.#ctor">
            <summary> Initializes a new instance of RoleAssignmentListResult. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RoleAssignmentListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment},System.String)">
            <summary> Initializes a new instance of RoleAssignmentListResult. </summary>
            <param name="value"> Role assignment list. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleAssignmentListResult.Value">
            <summary> Role assignment list. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleAssignmentListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.RoleDefinitionCreateParameters">
            <summary> Role definition create parameters. </summary>
            <summary> Role definition create parameters. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RoleDefinitionCreateParameters.#ctor(Azure.Security.KeyVault.Administration.Models.RoleDefinitionProperties)">
            <summary> Initializes a new instance of RoleDefinitionCreateParameters. </summary>
            <param name="properties"> Role definition properties. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="properties" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleDefinitionCreateParameters.Properties">
            <summary> Role definition properties. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.RoleDefinitionFilter">
            <summary> Role Definitions filter. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RoleDefinitionFilter.#ctor">
            <summary> Initializes a new instance of RoleDefinitionFilter. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleDefinitionFilter.RoleName">
            <summary> Returns role definition with the specific name. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.RoleDefinitionListResult">
            <summary> Role definition list operation result. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RoleDefinitionListResult.#ctor">
            <summary> Initializes a new instance of RoleDefinitionListResult. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RoleDefinitionListResult.#ctor(System.Collections.Generic.IReadOnlyList{Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition},System.String)">
            <summary> Initializes a new instance of RoleDefinitionListResult. </summary>
            <param name="value"> Role definition list. </param>
            <param name="nextLink"> The URL to use for getting the next set of results. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleDefinitionListResult.Value">
            <summary> Role definition list. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleDefinitionListResult.NextLink">
            <summary> The URL to use for getting the next set of results. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.RoleDefinitionProperties">
            <summary> Role definition properties. </summary>
            <summary> The options for creating or updating a role definition. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.RoleDefinitionProperties.#ctor">
            <summary> Initializes a new instance of RoleDefinitionProperties. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleDefinitionProperties.RoleName">
            <summary> The role name. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleDefinitionProperties.Description">
            <summary> The role definition description. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleDefinitionProperties.RoleType">
            <summary> The role type. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleDefinitionProperties.Permissions">
            <summary> Role definition permissions. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.RoleDefinitionProperties.AssignableScopes">
            <summary> Role definition assignable scopes. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.SASTokenParameter">
            <summary> The SASTokenParameter. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.SASTokenParameter.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of SASTokenParameter. </summary>
            <param name="storageResourceUri"> Azure Blob storage container Uri. </param>
            <param name="token"> The SAS token pointing to an Azure Blob storage container. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="storageResourceUri" /> or <paramref name="token" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SASTokenParameter.StorageResourceUri">
            <summary> Azure Blob storage container Uri. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SASTokenParameter.Token">
            <summary> The SAS token pointing to an Azure Blob storage container. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal">
            <summary> Selective Key Restore operation. </summary>
            <summary> Full restore operation. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal.#ctor">
            <summary> Initializes a new instance of SelectiveKeyRestoreDetailsInternal. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal.#ctor(System.String,System.String,Azure.Security.KeyVault.Administration.Models.KeyVaultServiceError,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary> Initializes a new instance of SelectiveKeyRestoreDetailsInternal. </summary>
            <param name="status"> Status of the restore operation. </param>
            <param name="statusDetails"> The status details of restore operation. </param>
            <param name="error"> Error encountered, if any, during the selective key restore operation. </param>
            <param name="jobId"> Identifier for the selective key restore operation. </param>
            <param name="startTime"> The start time of the restore operation. </param>
            <param name="endTime"> The end time of the restore operation. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal.Status">
            <summary> Status of the restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal.StatusDetails">
            <summary> The status details of restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal.Error">
            <summary> Error encountered, if any, during the selective key restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal.JobId">
            <summary> Identifier for the selective key restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal.StartTime">
            <summary> The start time of the restore operation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal.EndTime">
            <summary> The end time of the restore operation. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreOperationParameters">
            <summary> The SelectiveKeyRestoreOperationParameters. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreOperationParameters.#ctor(Azure.Security.KeyVault.Administration.Models.SASTokenParameter,System.String)">
            <summary> Initializes a new instance of SelectiveKeyRestoreOperationParameters. </summary>
            <param name="sasTokenParameters"></param>
            <param name="folder"> The Folder name of the blob where the previous successful full backup was stored. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="sasTokenParameters" /> or <paramref name="folder" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreOperationParameters.SasTokenParameters">
            <summary> Gets the sas token parameters. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreOperationParameters.Folder">
            <summary> The Folder name of the blob where the previous successful full backup was stored. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullBackupHeaders.RetryAfter">
            <summary> The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullBackupHeaders.AzureAsyncOperation">
            <summary> The URI to poll for completion status. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullRestoreOperationHeaders.RetryAfter">
            <summary> The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullRestoreOperationHeaders.AzureAsyncOperation">
            <summary> The URI to poll for completion status. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationSelectiveKeyRestoreOperationHeaders.RetryAfter">
            <summary> The recommended number of seconds to wait before calling the URI specified in Azure-AsyncOperation. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationSelectiveKeyRestoreOperationHeaders.AzureAsyncOperation">
            <summary> The URI to poll for completion status. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory">
            <summary> Model factory for read-only models. </summary>
            <summary>
            A factory class which constructs model classes for mocking purposes.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.KeyVaultRoleDefinition(System.String,System.String,System.Nullable{Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType},System.String,System.String,System.Nullable{Azure.Security.KeyVault.Administration.KeyVaultRoleType},System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Administration.KeyVaultPermission},System.Collections.Generic.IEnumerable{Azure.Security.KeyVault.Administration.KeyVaultRoleScope})">
            <summary> Initializes a new instance of KeyVaultRoleDefinition. </summary>
            <param name="id"> The role definition ID. </param>
            <param name="name"> The role definition name. </param>
            <param name="type"> The role definition type. </param>
            <param name="roleName"> The role name. </param>
            <param name="description"> The role definition description. </param>
            <param name="roleType"> The role type. </param>
            <param name="permissions"> Role definition permissions. </param>
            <param name="assignableScopes"> Role definition assignable scopes. </param>
            <returns> A new <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition" /> instance for mocking. </returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.KeyVaultRoleAssignment(System.String,System.String,System.String,Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties)">
            <summary> Initializes a new instance of KeyVaultRoleAssignment. </summary>
            <param name="id"> The role assignment ID. </param>
            <param name="name"> The role assignment name. </param>
            <param name="type"> The role assignment type. </param>
            <param name="properties"> Role assignment properties. </param>
            <returns> A new <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment" /> instance for mocking. </returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.KeyVaultRoleAssignmentProperties(System.Nullable{Azure.Security.KeyVault.Administration.KeyVaultRoleScope},System.String,System.String)">
            <summary> Initializes a new instance of KeyVaultRoleAssignmentProperties. </summary>
            <param name="scope"> The role scope. </param>
            <param name="roleDefinitionId"> The role definition ID. </param>
            <param name="principalId"> The principal ID. </param>
            <returns> A new <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties" /> instance for mocking. </returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.KeyVaultRoleDefinition(System.String,System.String,System.Nullable{Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType},System.String,System.String,System.Nullable{Azure.Security.KeyVault.Administration.KeyVaultRoleType},System.Collections.Generic.IList{Azure.Security.KeyVault.Administration.KeyVaultPermission},System.Collections.Generic.IList{Azure.Security.KeyVault.Administration.KeyVaultRoleScope})">
            <summary> Initializes a new instance of KeyVaultRoleDefinition. </summary>
            <param name="id"> The role definition ID. </param>
            <param name="name"> The role definition name. </param>
            <param name="type"> The role definition type. </param>
            <param name="roleName"> The role name. </param>
            <param name="description"> The role definition description. </param>
            <param name="roleType"> The role type. </param>
            <param name="permissions"> Role definition permissions. </param>
            <param name="assignableScopes"> Role definition assignable scopes. </param>
            <returns> A new <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition" /> instance for mocking. </returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.RoleDefinition(System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Azure.Security.KeyVault.Administration.KeyVaultPermission},System.Collections.Generic.IList{Azure.Security.KeyVault.Administration.KeyVaultRoleScope})">
            <summary>
            Initializes a new instance of RoleDefinition.
            </summary>
            <param name="id"> The role definition ID. </param>
            <param name="name"> The role definition name. </param>
            <param name="type"> The role definition type. </param>
            <param name="roleName"> The role name. </param>
            <param name="description"> The role definition description. </param>
            <param name="roleType"> The role type. </param>
            <param name="permissions"> Role definition permissions. </param>
            <param name="assignableScopes"> Role definition assignable scopes. </param>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.RoleAssignment(System.String,System.String,System.String,Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties)">
            <summary>
            Initializes a new instance of RoleAssignment.
            </summary>
            <param name="id"> The role assignment ID. </param>
            <param name="name"> The role assignment name. </param>
            <param name="type"> The role assignment type. </param>
            <param name="properties"> Role assignment properties. </param>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.RestoreOperation(Azure.Response,Azure.Security.KeyVault.Administration.KeyVaultBackupClient,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Initializes a new instance of a FullRestoreOperation for mocking purposes.
            </summary>
            <param name="response">The <see cref="T:Azure.Response" /> that will be returned from <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.GetRawResponse" />.</param>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="id"> Identifier for the restore operation.</param>
            <param name="startTime"> The start time of the restore operation.</param>
            <param name="endTime"> The end time of the restore operation.</param>
            <param name="errorMessage">The error message generated from the operation, if any.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.BackupOperation(Azure.Response,Azure.Security.KeyVault.Administration.KeyVaultBackupClient,System.String,System.Uri,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Initializes a new instance of a FullBackupOperation for mocking purposes.
            </summary>
            <param name="response">The <see cref="T:Azure.Response" /> that will be returned from <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.GetRawResponse" />.</param>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="id"> Identifier for the restore operation.</param>
            <param name="blobContainerUri">The Blob Container Uri containing the backup.</param>
            <param name="startTime"> The start time of the restore operation.</param>
            <param name="endTime"> The end time of the restore operation.</param>
            <param name="errorMessage">The error message generated from the operation, if any.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.BackupResult(System.Uri,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of a <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.BackupResult(System.Uri,System.DateTimeOffset,System.DateTimeOffset)" /> for mocking purposes.
            </summary>
            <param name="folderUri">The location of the backup.</param>
            <param name="startTime">The start time of the backup operation.</param>
            <param name="endTime">The end time of the backup operation.</param>
            <returns>A new <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.BackupResult(System.Uri,System.DateTimeOffset,System.DateTimeOffset)" /> instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.RestoreResult(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of a <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.RestoreResult(System.DateTimeOffset,System.DateTimeOffset)" /> for mocking purposes.
            </summary>
            <param name="startTime">The start time of the restore operation.</param>
            <param name="endTime">The end time of the restore operation.</param>
            <returns>A new <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.BackupResult(System.Uri,System.DateTimeOffset,System.DateTimeOffset)" /> instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.SelectiveKeyRestoreResult(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Initializes a new instance of a <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.SelectiveKeyRestoreResult(System.DateTimeOffset,System.DateTimeOffset)" /> for mocking purposes.
            </summary>
            <param name="startTime">The start time of the restore operation.</param>
            <param name="endTime">The end time of the restore operation.</param>
            <returns>A new <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationModelFactory.BackupResult(System.Uri,System.DateTimeOffset,System.DateTimeOffset)" /> instance.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultDataAction">
            <summary> Supported permissions for data actions. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultDataAction.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultDataAction" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ReadHsmKey">
            <summary> Read HSM key metadata. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.WriteHsmKey">
            <summary> Update an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ReadDeletedHsmKey">
            <summary> Read deleted HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.RecoverDeletedHsmKey">
            <summary> Recover deleted HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.BackupHsmKeys">
            <summary> Backup HSM keys. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.RestoreHsmKeys">
            <summary> Restore HSM keys. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.DeleteRoleAssignment">
            <summary> Delete role assignment. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.GetRoleAssignment">
            <summary> Get role assignment. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.WriteRoleAssignment">
            <summary> Create or update role assignment. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ReadRoleDefinition">
            <summary> Get role definition. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.WriteRoleDefinition">
            <summary> Create or update role definition. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.DeleteRoleDefinition">
            <summary> Delete role definition. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.EncryptHsmKey">
            <summary> Encrypt using an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.DecryptHsmKey">
            <summary> Decrypt using an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.WrapHsmKey">
            <summary> Wrap using an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.UnwrapHsmKey">
            <summary> Unwrap using an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.SignHsmKey">
            <summary> Sign using an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.VerifyHsmKey">
            <summary> Verify using an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.CreateHsmKey">
            <summary> Create an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.DeleteHsmKey">
            <summary> Delete an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ExportHsmKey">
            <summary> Export an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ReleaseKey">
            <summary> Release an HSM key using Secure Key Release. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ImportHsmKey">
            <summary> Import an HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.PurgeDeletedHsmKey">
            <summary> Purge a deleted HSM key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.DownloadHsmSecurityDomain">
            <summary> Download an HSM security domain. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.DownloadHsmSecurityDomainStatus">
            <summary> Check status of HSM security domain download. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.UploadHsmSecurityDomain">
            <summary> Upload an HSM security domain. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ReadHsmSecurityDomainStatus">
            <summary> Check the status of the HSM security domain exchange file. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ReadHsmSecurityDomainTransferKey">
            <summary> Download an HSM security domain transfer key. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.StartHsmBackup">
            <summary> Start an HSM backup. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.StartHsmRestore">
            <summary> Start an HSM restore. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ReadHsmBackupStatus">
            <summary> Read an HSM backup status. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ReadHsmRestoreStatus">
            <summary> Read an HSM restore status. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultDataAction.RandomNumbersGenerate">
            <summary> Generate random numbers. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultDataAction.op_Equality(Azure.Security.KeyVault.Administration.KeyVaultDataAction,Azure.Security.KeyVault.Administration.KeyVaultDataAction)">
            <summary> Determines if two <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultDataAction" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultDataAction.op_Inequality(Azure.Security.KeyVault.Administration.KeyVaultDataAction,Azure.Security.KeyVault.Administration.KeyVaultDataAction)">
            <summary> Determines if two <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultDataAction" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultDataAction.op_Implicit(System.String)~Azure.Security.KeyVault.Administration.KeyVaultDataAction">
            <summary> Converts a string to a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultDataAction" />. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultDataAction.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultDataAction.Equals(Azure.Security.KeyVault.Administration.KeyVaultDataAction)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultDataAction.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultDataAction.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultPermission">
            <summary> Role definition permissions. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultPermission.#ctor">
            <summary> Initializes a new instance of KeyVaultPermission. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultPermission.#ctor(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Azure.Security.KeyVault.Administration.KeyVaultDataAction},System.Collections.Generic.IList{Azure.Security.KeyVault.Administration.KeyVaultDataAction})">
            <summary> Initializes a new instance of KeyVaultPermission. </summary>
            <param name="actions"> Action permissions that are granted. </param>
            <param name="notActions"> Action permissions that are excluded but not denied. They may be granted by other role definitions assigned to a principal. </param>
            <param name="dataActions"> Data action permissions that are granted. </param>
            <param name="notDataActions"> Data action permissions that are excluded but not denied. They may be granted by other role definitions assigned to a principal. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultPermission.Actions">
            <summary> Action permissions that are granted. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultPermission.NotActions">
            <summary> Action permissions that are excluded but not denied. They may be granted by other role definitions assigned to a principal. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultPermission.DataActions">
            <summary> Data action permissions that are granted. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultPermission.NotDataActions">
            <summary> Data action permissions that are excluded but not denied. They may be granted by other role definitions assigned to a principal. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment">
            <summary> Role Assignments. </summary>
            <summary> Role Assignments. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment.#ctor">
            <summary> Initializes a new instance of KeyVaultRoleAssignment. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment.#ctor(System.String,System.String,System.String,Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties)">
            <summary> Initializes a new instance of KeyVaultRoleAssignment. </summary>
            <param name="id"> The role assignment ID. </param>
            <param name="name"> The role assignment name. </param>
            <param name="type"> The role assignment type. </param>
            <param name="properties"> Role assignment properties. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment.Id">
            <summary> The role assignment ID. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment.Name">
            <summary> The role assignment name. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment.Type">
            <summary> The role assignment type. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment.Properties">
            <summary> Role assignment properties. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties">
            <summary> Role assignment properties with scope. </summary>
            <summary> Role assignment properties with scope. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties.#ctor">
            <summary> Initializes a new instance of KeyVaultRoleAssignmentProperties. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties.#ctor(System.Nullable{Azure.Security.KeyVault.Administration.KeyVaultRoleScope},System.String,System.String)">
            <summary> Initializes a new instance of KeyVaultRoleAssignmentProperties. </summary>
            <param name="scope"> The role scope. </param>
            <param name="roleDefinitionId"> The role definition ID. </param>
            <param name="principalId"> The principal ID. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties.Scope">
            <summary> The role scope. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties.RoleDefinitionId">
            <summary> The role definition ID. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentProperties.PrincipalId">
            <summary> The principal ID. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentPropertiesInternal">
            <summary> Role assignment properties. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentPropertiesInternal.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of KeyVaultRoleAssignmentPropertiesInternal. </summary>
            <param name="roleDefinitionId"> The role definition ID used in the role assignment. </param>
            <param name="principalId"> The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="roleDefinitionId" /> or <paramref name="principalId" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentPropertiesInternal.RoleDefinitionId">
            <summary> The role definition ID used in the role assignment. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignmentPropertiesInternal.PrincipalId">
            <summary> The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition">
            <summary> Role definition. </summary>
            <summary> A Key Vault role definition. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.#ctor">
            <summary> Initializes a new instance of KeyVaultRoleDefinition. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.#ctor(System.String,System.String,System.Nullable{Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType},System.String,System.String,System.Nullable{Azure.Security.KeyVault.Administration.KeyVaultRoleType},System.Collections.Generic.IList{Azure.Security.KeyVault.Administration.KeyVaultPermission},System.Collections.Generic.IList{Azure.Security.KeyVault.Administration.KeyVaultRoleScope})">
            <summary> Initializes a new instance of KeyVaultRoleDefinition. </summary>
            <param name="id"> The role definition ID. </param>
            <param name="name"> The role definition name. </param>
            <param name="type"> The role definition type. </param>
            <param name="roleName"> The role name. </param>
            <param name="description"> The role definition description. </param>
            <param name="roleType"> The role type. </param>
            <param name="permissions"> Role definition permissions. </param>
            <param name="assignableScopes"> Role definition assignable scopes. </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.Id">
            <summary> The role definition ID. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.Name">
            <summary> The role definition name. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.Type">
            <summary> The role definition type. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.RoleName">
            <summary> The role name. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.Description">
            <summary> The role definition description. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.RoleType">
            <summary> The role type. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.Permissions">
            <summary> Role definition permissions. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition.AssignableScopes">
            <summary> Role definition assignable scopes. </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType">
            <summary> The role definition type. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType.MicrosoftAuthorizationRoleDefinitions">
            <summary> Microsoft.Authorization/roleDefinitions. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType.op_Equality(Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType,Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType)">
            <summary> Determines if two <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType.op_Inequality(Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType,Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType)">
            <summary> Determines if two <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType.op_Implicit(System.String)~Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType">
            <summary> Converts a string to a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType" />. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType.Equals(Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinitionType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope">
            <summary> The role scope. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.Global">
            <summary> Global scope. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.Keys">
            <summary> Keys scope. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.op_Equality(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,Azure.Security.KeyVault.Administration.KeyVaultRoleScope)">
            <summary> Determines if two <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.op_Inequality(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,Azure.Security.KeyVault.Administration.KeyVaultRoleScope)">
            <summary> Determines if two <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.op_Implicit(System.String)~Azure.Security.KeyVault.Administration.KeyVaultRoleScope">
            <summary> Converts a string to a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" />. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.Equals(Azure.Security.KeyVault.Administration.KeyVaultRoleScope)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleScope.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" /> structure.
            </summary>
            <param name="resourceId">The Resource Id for the given Resource.</param>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultRoleType">
            <summary> The role type. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleType.#ctor(System.String)">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleType" />. </summary>
            <exception cref="T:System.ArgumentNullException"> <paramref name="value" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleType.BuiltInRole">
            <summary> Built in role. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRoleType.CustomRole">
            <summary> Custom role. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleType.op_Equality(Azure.Security.KeyVault.Administration.KeyVaultRoleType,Azure.Security.KeyVault.Administration.KeyVaultRoleType)">
            <summary> Determines if two <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleType" /> values are the same. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleType.op_Inequality(Azure.Security.KeyVault.Administration.KeyVaultRoleType,Azure.Security.KeyVault.Administration.KeyVaultRoleType)">
            <summary> Determines if two <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleType" /> values are not the same. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleType.op_Implicit(System.String)~Azure.Security.KeyVault.Administration.KeyVaultRoleType">
            <summary> Converts a string to a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleType" />. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleType.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary><param name="obj">The object to compare with the current instance.</param><returns><see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleType.Equals(Azure.Security.KeyVault.Administration.KeyVaultRoleType)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary><param name="other">An object to compare with this object.</param><returns><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleType.GetHashCode">
            <summary>Returns the hash code for this instance.</summary><returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRoleType.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary><returns>The fully qualified type name.</returns>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String)">
            <summary> Initializes a new instance of RoleAssignmentsRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.DeleteAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a role assignment. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignment to delete. </param>
            <param name="roleAssignmentName"> The name of the role assignment to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" /> or <paramref name="roleAssignmentName" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.Delete(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a role assignment. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignment to delete. </param>
            <param name="roleAssignmentName"> The name of the role assignment to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" /> or <paramref name="roleAssignmentName" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.CreateAsync(System.String,System.String,System.String,Azure.Security.KeyVault.Administration.Models.RoleAssignmentCreateParameters,System.Threading.CancellationToken)">
            <summary> Creates a role assignment. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignment to create. </param>
            <param name="roleAssignmentName"> The name of the role assignment to create. It can be any valid GUID. </param>
            <param name="parameters"> Parameters for the role assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" />, <paramref name="roleAssignmentName" /> or <paramref name="parameters" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.Create(System.String,System.String,System.String,Azure.Security.KeyVault.Administration.Models.RoleAssignmentCreateParameters,System.Threading.CancellationToken)">
            <summary> Creates a role assignment. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignment to create. </param>
            <param name="roleAssignmentName"> The name of the role assignment to create. It can be any valid GUID. </param>
            <param name="parameters"> Parameters for the role assignment. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" />, <paramref name="roleAssignmentName" /> or <paramref name="parameters" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.GetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the specified role assignment. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignment. </param>
            <param name="roleAssignmentName"> The name of the role assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" /> or <paramref name="roleAssignmentName" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.Get(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the specified role assignment. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignment. </param>
            <param name="roleAssignmentName"> The name of the role assignment to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" /> or <paramref name="roleAssignmentName" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.ListForScopeAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets role assignments for a scope. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignments. </param>
            <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.ListForScope(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets role assignments for a scope. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignments. </param>
            <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.ListForScopeNextPageAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets role assignments for a scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignments. </param>
            <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="vaultBaseUrl" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleAssignmentsRestClient.ListForScopeNextPage(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Gets role assignments for a scope. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role assignments. </param>
            <param name="filter"> The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="vaultBaseUrl" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.ClientDiagnostics">
            <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.Pipeline.HttpPipeline,System.String)">
            <summary> Initializes a new instance of RoleDefinitionsRestClient. </summary>
            <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
            <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
            <param name="apiVersion"> Api Version. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="clientDiagnostics" />, <paramref name="pipeline" /> or <paramref name="apiVersion" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.DeleteAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a custom role definition. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition to delete. Managed HSM only supports '/'. </param>
            <param name="roleDefinitionName"> The name (GUID) of the role definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" /> or <paramref name="roleDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.Delete(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Deletes a custom role definition. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition to delete. Managed HSM only supports '/'. </param>
            <param name="roleDefinitionName"> The name (GUID) of the role definition to delete. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" /> or <paramref name="roleDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.CreateOrUpdateAsync(System.String,System.String,System.String,Azure.Security.KeyVault.Administration.Models.RoleDefinitionCreateParameters,System.Threading.CancellationToken)">
            <summary> Creates or updates a custom role definition. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition to create or update. Managed HSM only supports '/'. </param>
            <param name="roleDefinitionName"> The name of the role definition to create or update. It can be any valid GUID. </param>
            <param name="parameters"> Parameters for the role definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" />, <paramref name="roleDefinitionName" /> or <paramref name="parameters" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.CreateOrUpdate(System.String,System.String,System.String,Azure.Security.KeyVault.Administration.Models.RoleDefinitionCreateParameters,System.Threading.CancellationToken)">
            <summary> Creates or updates a custom role definition. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition to create or update. Managed HSM only supports '/'. </param>
            <param name="roleDefinitionName"> The name of the role definition to create or update. It can be any valid GUID. </param>
            <param name="parameters"> Parameters for the role definition. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" />, <paramref name="roleDefinitionName" /> or <paramref name="parameters" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.GetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the specified role definition. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition to get. Managed HSM only supports '/'. </param>
            <param name="roleDefinitionName"> The name of the role definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" /> or <paramref name="roleDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.Get(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get the specified role definition. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition to get. Managed HSM only supports '/'. </param>
            <param name="roleDefinitionName"> The name of the role definition to get. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" />, <paramref name="scope" /> or <paramref name="roleDefinitionName" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.ListAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get all role definitions that are applicable at scope and above. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition. </param>
            <param name="filter"> The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.List(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get all role definitions that are applicable at scope and above. </summary>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition. </param>
            <param name="filter"> The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="vaultBaseUrl" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.ListNextPageAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get all role definitions that are applicable at scope and above. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition. </param>
            <param name="filter"> The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="vaultBaseUrl" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RoleDefinitionsRestClient.ListNextPage(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary> Get all role definitions that are applicable at scope and above. </summary>
            <param name="nextLink"> The URL to the next page of results. </param>
            <param name="vaultBaseUrl"> The vault name, for example https://myvault.vault.azure.net. </param>
            <param name="scope"> The scope of the role definition. </param>
            <param name="filter"> The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. </param>
            <param name="cancellationToken"> The cancellation token to use. </param>
            <exception cref="T:System.ArgumentNullException"> <paramref name="nextLink" />, <paramref name="vaultBaseUrl" /> or <paramref name="scope" /> is null. </exception>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient">
            <summary>
            The KeyVaultAccessControlClient provides synchronous and asynchronous methods to view and manage Role Based Access for the Azure Key Vault.
            The client supports creating, listing, updating, and deleting <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment" />.
            The client also supports listing <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleDefinition" />.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.VaultUri">
            <summary>
            The vault Uri.
            </summary>
            <value></value>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient" /> class for the specified vault.
            </summary>
            <param name="vaultUri">A <see cref="T:System.Uri" /> to the vault on which the client operates. Appears as "DNS Name" in the Azure portal. You should validate that this URI references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.</param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vaultUri" /> or <paramref name="credential" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient" /> class for the specified vault.
            </summary>
            <param name="vaultUri">A <see cref="T:System.Uri" /> to the vault on which the client operates. Appears as "DNS Name" in the Azure portal. You should validate that this URI references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.</param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <param name="options"><see cref="T:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions" /> that allow to configure the management of the request sent to Key Vault.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vaultUri" /> or <paramref name="credential" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.GetRoleDefinitions(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Threading.CancellationToken)">
            <summary>
            Get all role definitions that are applicable at scope and above.
            </summary>
            <param name="roleScope"> The scope of the role assignments. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleScope" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.GetRoleDefinitionsAsync(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Threading.CancellationToken)">
            <summary>
            Get all role definitions that are applicable at scope and above.
            </summary>
            <param name="roleScope"> The scope of the role definition. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleScope" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.GetRoleDefinition(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get a specific role definition.
            </summary>
            <param name="roleScope"> The scope of the role assignments. </param>
            <param name="roleDefinitionName">The role definition name.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleScope" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.GetRoleDefinitionAsync(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Get a specific role definition.
            </summary>
            <param name="roleScope"> The scope of the role definition. </param>
            <param name="roleDefinitionName">The role definition name.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleScope" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.CreateOrUpdateRoleDefinitionAsync(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Creates or updates a role definition. If the named role definition is already defined it will be updated.
            </summary>
            <param name="roleScope">The <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" /> to which the definition applies.</param>
            <param name="roleDefinitionName">The unique role definition name. If null a unique role definition name will be generated.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.CreateOrUpdateRoleDefinition(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Creates or updates a role definition. If the named role definition is already defined it will be updated.
            </summary>
            <param name="roleScope">The <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleScope" /> to which the definition applies.</param>
            <param name="roleDefinitionName">The unique role definition name. If null a unique role definition name will be generated.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.CreateOrUpdateRoleDefinitionAsync(Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a role definition.
            </summary>
            <param name="options">An instance of <see cref="T:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions" /> that define parameters for creating a role definition.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="options" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.CreateOrUpdateRoleDefinition(Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a role definition.
            </summary>
            <param name="options">An instance of <see cref="T:Azure.Security.KeyVault.Administration.CreateOrUpdateRoleDefinitionOptions" /> that define parameters for creating a role definition.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="options" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.DeleteRoleDefinitionAsync(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Deletes a role definition.
            </summary>
            <param name="roleScope">The scope of the role to delete.</param>
            <param name="roleDefinitionName">The name used of the role definition to delete.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.DeleteRoleDefinition(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Deletes a role definition.
            </summary>
            <param name="roleScope"></param>
            <param name="roleDefinitionName"></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>A <see cref="T:Azure.Response`1" /> containing the result of the operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.GetRoleAssignments(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Threading.CancellationToken)">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment" />s for a scope.
            </summary>
            <param name="roleScope"> The scope of the role assignments. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleScope" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.GetRoleAssignmentsAsync(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.Threading.CancellationToken)">
            <summary>0
            Gets the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment" />s for a scope.
            </summary>
            <param name="roleScope"> The scope of the role assignments. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleScope" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.CreateRoleAssignment(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.String,System.String,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment" />.
            </summary>
            <param name="roleScope">The scope of the role assignment to create.</param>
            <param name="roleDefinitionId">The role definition ID used in the role assignment.</param>
            <param name="principalId">The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.</param>
            <param name="roleAssignmentName">Optional name used to create the role assignment. A new <see cref="T:System.Guid" /> will be generated if not specified.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleDefinitionId" /> or <paramref name="principalId" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleDefinitionId" /> or <paramref name="principalId" /> is empty.</exception>
            <returns>A <see cref="T:Azure.Response`1" /> containing the result of the operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.CreateRoleAssignmentAsync(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.String,System.String,System.Nullable{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRoleAssignment" />.
            </summary>
            <param name="roleScope">The scope of the role assignment to create.</param>
            <param name="roleDefinitionId">The role definition ID used in the role assignment.</param>
            <param name="principalId">The principal ID assigned to the role. This maps to the ID inside the Active Directory. It can point to a user, service principal, or security group.</param>
            <param name="roleAssignmentName">Optional name used to create the role assignment. A new <see cref="T:System.Guid" /> will be generated if not specified.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleDefinitionId" /> or <paramref name="principalId" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleDefinitionId" /> or <paramref name="principalId" /> is empty.</exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> containing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.GetRoleAssignment(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the specified role assignment.
            </summary>
            <param name="roleScope"> The scope of the role assignment. </param>
            <param name="roleAssignmentName"> The name of the role assignment to get. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleAssignmentName" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleAssignmentName" /> is empty.</exception>
            <returns>A <see cref="T:Azure.Response`1" /> containing the result of the operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.GetRoleAssignmentAsync(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the specified role assignment.
            </summary>
            <param name="roleScope"> The scope of the role assignment. </param>
            <param name="roleAssignmentName"> The name of the role assignment to get. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleAssignmentName" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleAssignmentName" /> is empty.</exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> containing the result of the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.DeleteRoleAssignment(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete the specified role assignment.
            </summary>
            <param name="roleScope"> The scope of the role assignment. </param>
            <param name="roleAssignmentName"> The name of the role assignment to get. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleAssignmentName" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleAssignmentName" /> is empty.</exception>
            <returns>A <see cref="T:Azure.Response`1" /> containing the result of the operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAccessControlClient.DeleteRoleAssignmentAsync(Azure.Security.KeyVault.Administration.KeyVaultRoleScope,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete the specified role assignment.
            </summary>
            <param name="roleScope"> The scope of the role assignment. </param>
            <param name="roleAssignmentName"> The name of the role assignment to get. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="roleAssignmentName" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="roleAssignmentName" /> is empty.</exception>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> containing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions">
            <summary>
            Options to configure the requests sent to Key Vault.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.LatestVersion">
            <summary>
            The latest service version supported by this client library.
            For more information, see
            <see href="https://docs.microsoft.com/rest/api/keyvault/key-vault-versions">Key Vault versions</see>.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.ServiceVersion">
            <summary>
            The versions of Azure Key Vault supported by this client
            library.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.ServiceVersion.V7_2">
            <summary>
            The Key Vault API version 7.2.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.ServiceVersion.V7_3">
            <summary>
            The Key Vault API version 7.3.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.Version">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.ServiceVersion" /> of the service API used when
            making requests. For more information, see
            <see href="https://docs.microsoft.com/rest/api/keyvault/key-vault-versions">Key Vault versions</see>.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.#ctor(Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.ServiceVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions" /> class.
            class.
            </summary>
            <param name="version">
            The <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.ServiceVersion" /> of the service API used when
            making requests.
            </param>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions.DisableChallengeResourceVerification">
            <summary>
            Gets or sets whether to disable verification that the authentication challenge resource matches the Key Vault or Managed HSM domain.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient">
            <summary>
            The KeyVaultBackupClient provides synchronous and asynchronous methods to perform full backup and restore of the Azure Key Vault.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.VaultUri">
            <summary>
            The vault Uri.
            </summary>
            <value></value>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" /> class for mocking.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.#ctor(System.Uri,Azure.Core.TokenCredential)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" /> class for the specified vault.
            </summary>
            <param name="vaultUri">A <see cref="T:System.Uri" /> to the vault on which the client operates. Appears as "DNS Name" in the Azure portal. You should validate that this URI references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details.</param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vaultUri" /> or <paramref name="credential" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" /> class for the specified vault.
            </summary>
            <param name="vaultUri">A <see cref="T:System.Uri" /> to the vault on which the client operates. Appears as "DNS Name" in the Azure portal You should validate that this URI references a valid Key Vault or Managed HSM resource. See https://aka.ms/azsdk/blog/vault-uri for details..</param>
            <param name="credential">A <see cref="T:Azure.Core.TokenCredential" /> used to authenticate requests to the vault, such as DefaultAzureCredential.</param>
            <param name="options"><see cref="T:Azure.Security.KeyVault.Administration.KeyVaultAdministrationClientOptions" /> that allow to configure the management of the request sent to Key Vault.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="vaultUri" /> or <paramref name="credential" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartBackupAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates a full backup of the Key Vault.
            </summary>
            <param name="blobStorageUri">The <see cref="T:System.Uri" /> for the blob storage resource.</param>
            <param name="sasToken">A Shared Access Signature (SAS) token to authorize access to the blob.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="blobStorageUri" /> or <paramref name="sasToken" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <returns>A <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" /> to wait on this long-running operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartBackup(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates a full backup of the Key Vault.
            </summary>
            <param name="blobStorageUri">The <see cref="T:System.Uri" /> for the blob storage resource.</param>
            <param name="sasToken">A Shared Access Signature (SAS) token to authorize access to the blob.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="blobStorageUri" /> or <paramref name="sasToken" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <returns>A <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" /> to wait on this long-running operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestoreAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates a full restore of the Key Vault.
            </summary>
            <param name="folderUri">
            The <see cref="T:System.Uri" /> for the blob storage resource, including the path to the blob container where the backup resides.
            This would be the exact value that is returned as the result of a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" />.
            An example Uri may look like the following: https://contoso.blob.core.windows.net/backup/mhsm-contoso-2020090117323313.
            </param>
            <param name="sasToken">A Shared Access Signature (SAS) token to authorize access to the blob.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderUri" /> or <paramref name="sasToken" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <returns>A <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation" /> to wait on this long-running operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestore(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates a full Restore of the Key Vault.
            </summary>
            <param name="folderUri">
            The <see cref="T:System.Uri" /> for the blob storage resource, including the path to the blob container where the backup resides.
            This would be the exact value that is returned as the result of a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" />.
            An example Uri path may look like the following: https://contoso.blob.core.windows.net/backup/mhsm-contoso-2020090117323313.
            </param>
            <param name="sasToken">A Shared Access Signature (SAS) token to authorize access to the blob.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderUri" /> or <paramref name="sasToken" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <returns>A <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation" /> to wait on this long-running operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartSelectiveKeyRestoreAsync(System.String,System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates a selective restore of the Key Vault.
            </summary>
            <param name="keyName">The name of the key to be restored from the supplied backup.</param>
            <param name="folderUri">
            The <see cref="T:System.Uri" /> for the blob storage resource, including the path to the blob container where the backup resides.
            This would be the exact value that is returned as the result of a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" />.
            An example Uri path may look like the following: https://contoso.blob.core.windows.net/backup/mhsm-contoso-2020090117323313.
            </param>
            <param name="sasToken">A Shared Access Signature (SAS) token to authorize access to the blob.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderUri" /> or <paramref name="sasToken" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <returns>A <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation" /> to wait on this long-running operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartSelectiveKeyRestore(System.String,System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates a selective Restore of the Key Vault.
            </summary>
            <param name="keyName">The name of the key to be restored from the supplied backup.</param>
            <param name="folderUri">
            The <see cref="T:System.Uri" /> for the blob storage resource, including the path to the blob container where the backup resides.
            This would be the exact value that is returned as the result of a <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" />.
            An example Uri path may look like the following: https://contoso.blob.core.windows.net/backup/mhsm-contoso-2020090117323313.
            </param>
            <param name="sasToken">A Shared Access Signature (SAS) token to authorize access to the blob.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="folderUri" /> or <paramref name="sasToken" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
            <returns>A <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation" /> to wait on this long-running operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.GetRestoreDetailsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the details of full restore operation.
            </summary>
            <param name="jobId"> The Job Id returned part of the full restore operation. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobId" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.GetRestoreDetails(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the details of full restore operation.
            </summary>
            <param name="jobId"> The Job Id returned part of the full restore operation. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobId" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.GetSelectiveKeyRestoreDetailsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the details of selective restore operation.
            </summary>
            <param name="jobId"> The Job Id returned part of the full restore operation. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobId" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.GetSelectiveKeyRestoreDetails(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the details of selective restore operation.
            </summary>
            <param name="jobId"> The Job Id returned part of the full restore operation. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobId" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.GetBackupDetailsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the details of full backup operation.
            </summary>
            <param name="jobId"> The Job Id returned part of the full backup operation. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobId" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.GetBackupDetails(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the details of full backup operation.
            </summary>
            <param name="jobId"> The Job Id returned part of the full backup operation. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="jobId" /> is null.</exception>
            <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation">
            <summary>
            A long-running operation for <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartBackup(System.Uri,System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartBackupAsync(System.Uri,System.String,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="F:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation._retryAfterSeconds">
            <summary>
            The number of seconds recommended by the service to delay before checking on completion status.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.#ctor(Azure.Security.KeyVault.Administration.KeyVaultBackupClient,System.String)">
            <summary>
            Creates an instance of a BackupOperation from a previously started operation. <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.UpdateStatus(System.Threading.CancellationToken)" />, <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.UpdateStatusAsync(System.Threading.CancellationToken)" />,
             <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" />, or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /> must be called
            to re-populate the details of this operation.
            </summary>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="id">The <see cref="P:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.Id" /> from a previous <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id" /> or <paramref name="client" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.#ctor(Azure.Security.KeyVault.Administration.KeyVaultBackupClient,Azure.Core.ResponseWithHeaders{Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullBackupHeaders})">
            <summary>
            Initializes a new instance of a BackupOperation.
            </summary>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="response">The <see cref="T:Azure.Core.ResponseWithHeaders`2" /> returned from <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartBackup(System.Uri,System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartBackupAsync(System.Uri,System.String,System.Threading.CancellationToken)" />.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.#ctor(Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal,Azure.Response,Azure.Security.KeyVault.Administration.KeyVaultBackupClient)">
            <summary>
            Initializes a new instance of a BackupOperation for mocking purposes.
            </summary>
            <param name="value">The <see cref="T:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal" /> that will be returned from <see cref="P:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.Value" />.</param>
            <param name="response">The <see cref="T:Azure.Response" /> that will be returned from <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.GetRawResponse" />.</param>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" /> for mocking. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.StartTime">
            <summary>
            The start time of the backup operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.EndTime">
            <summary>
            The end time of the backup operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.Value">
            <summary>
            Gets the <see cref="T:Azure.Security.KeyVault.Administration.Models.FullBackupDetailsInternal" /> of the backup operation.
            You should await <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" /> before attempting to use a key in this pending state.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultBackupResult">
            <summary>
            The result of a backup operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupResult.FolderUri">
            <summary>
            Gets the location of the full backup.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupResult.StartTime">
            <summary>
            Gets the start time of the backup operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultBackupResult.EndTime">
            <summary>
            Gets the end time of the backup operation.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation">
            <summary>
            A long-running operation for <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestore(System.Uri,System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestoreAsync(System.Uri,System.String,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.#ctor(Azure.Security.KeyVault.Administration.KeyVaultBackupClient,System.String)">
            <summary>
            Creates an instance of a RestoreOperation from a previously started operation. <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.UpdateStatus(System.Threading.CancellationToken)" />, <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.UpdateStatusAsync(System.Threading.CancellationToken)" />,
             <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" />, or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /> must be called
            to re-populate the details of this operation.
            </summary>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="id">The <see cref="P:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.Id" /> from a previous <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id" /> or <paramref name="client" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.#ctor(Azure.Security.KeyVault.Administration.KeyVaultBackupClient,Azure.Core.ResponseWithHeaders{Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullRestoreOperationHeaders})">
            <summary>
            Initializes a new instance of a RestoreOperation.
            </summary>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="response">The <see cref="T:Azure.Core.ResponseWithHeaders`2" /> returned from <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestore(System.Uri,System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestoreAsync(System.Uri,System.String,System.Threading.CancellationToken)" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client" /> or <paramref name="response" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.#ctor(Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal,Azure.Response,Azure.Security.KeyVault.Administration.KeyVaultBackupClient)">
            <summary>
            Initializes a new instance of a RestoreOperation for mocking purposes.
            </summary>
            <param name="value">The <see cref="T:Azure.Security.KeyVault.Administration.Models.RestoreDetailsInternal" /> that will be used to populate various properties.</param>
            <param name="response">The <see cref="T:Azure.Response" /> that will be returned from <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.GetRawResponse" />.</param>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> or <paramref name="response" /> or <paramref name="client" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation" /> for mocking. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.StartTime">
            <summary>
            The start time of the restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.EndTime">
            <summary>
            The end time of the restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultRestoreOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultRestoreResult">
            <summary>
            The result of a restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRestoreResult.StartTime">
            <summary>
            Gets the start time of the restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultRestoreResult.EndTime">
            <summary>
            Gets the end time of the restore operation.
            </summary>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation">
            <summary>
            A long-running operation for <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartSelectiveKeyRestore(System.String,System.Uri,System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartSelectiveKeyRestoreAsync(System.String,System.Uri,System.String,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.#ctor(Azure.Security.KeyVault.Administration.KeyVaultBackupClient,System.String)">
            <summary>
            Creates an instance of a SelectiveKeyRestoreOperation from a previously started operation. <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.UpdateStatus(System.Threading.CancellationToken)" />, <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.UpdateStatusAsync(System.Threading.CancellationToken)" />,
             <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.WaitForCompletionAsync(System.Threading.CancellationToken)" />, or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /> must be called
            to re-populate the details of this operation.
            </summary>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="id">The <see cref="P:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.Id" /> from a previous <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id" /> or <paramref name="client" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.#ctor(Azure.Security.KeyVault.Administration.KeyVaultBackupClient,Azure.Core.ResponseWithHeaders{Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationSelectiveKeyRestoreOperationHeaders})">
            <summary>
            Initializes a new instance of a SelectiveKeyRestoreOperation.
            </summary>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="response">The <see cref="T:Azure.Core.ResponseWithHeaders`2" /> returned from <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestore(System.Uri,System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestoreAsync(System.Uri,System.String,System.Threading.CancellationToken)" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client" /> or <paramref name="response" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.#ctor(Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal,Azure.Response,Azure.Security.KeyVault.Administration.KeyVaultBackupClient)">
            <summary>
            Initializes a new instance of a SelectiveKeyRestoreOperation for mocking purposes.
            </summary>
            <param name="value">The <see cref="T:Azure.Security.KeyVault.Administration.Models.SelectiveKeyRestoreDetailsInternal" /> that will be used to populate various properties.</param>
            <param name="response">The <see cref="T:Azure.Response" /> that will be returned from <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.GetRawResponse" />.</param>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> or <paramref name="response" /> or <paramref name="client" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.#ctor">
            <summary> Initializes a new instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation" /> for mocking. </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.StartTime">
            <summary>
            The start time of the restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.EndTime">
            <summary>
            The end time of the restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreOperation.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="T:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreResult">
            <summary>
            The result of a selective key restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreResult.StartTime">
            <summary>
            Gets the start time of the selective key restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.KeyVaultSelectiveKeyRestoreResult.EndTime">
            <summary>
            Gets the end time of the selective key restore operation.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.OperationHeadersExtensions.JobId(Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullBackupHeaders)">
            <summary>
            Extracts the operation JobId from the <see cref="T:Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullBackupHeaders" /> AzureAsyncOperation.
            </summary>
            <returns>The operation JobId.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.OperationHeadersExtensions.JobId(Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullRestoreOperationHeaders)">
            <summary>
            Extracts the operation JobId from the <see cref="T:Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationFullRestoreOperationHeaders" /> AzureAsyncOperation.
            </summary>
            <returns>The operation JobId.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.OperationHeadersExtensions.JobId(Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationSelectiveKeyRestoreOperationHeaders)">
            <summary>
            Extracts the operation JobId from the <see cref="T:Azure.Security.KeyVault.Administration.AzureSecurityKeyVaultAdministrationSelectiveKeyRestoreOperationHeaders" /> AzureAsyncOperation.
            </summary>
            <returns>The operation JobId.</returns>
        </member>
        <member name="F:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3._retryAfterSeconds">
            <summary>
            The number of seconds recommended by the service to delay before checking on completion status.
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.#ctor(Azure.Security.KeyVault.Administration.KeyVaultBackupClient,System.String)">
            <summary>
            Creates an instance of a RestoreOperation from a previously started operation.
             <see cref="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.WaitForCompletionAsync(System.Threading.CancellationToken)" />, or <see cref="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /> must be called
            to re-populate the details of this operation.
            </summary>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="id">The <see cref="P:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.Id" /> from a previous <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupOperation" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="id" /> or <paramref name="client" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.#ctor(Azure.Security.KeyVault.Administration.KeyVaultBackupClient,Azure.Core.ResponseWithHeaders{`0})">
            <summary>
            Initializes a new instance of a RestoreOperation.
            </summary>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <param name="response">The <see cref="T:Azure.Core.ResponseWithHeaders`2" /> returned from <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestore(System.Uri,System.String,System.Threading.CancellationToken)" /> or <see cref="M:Azure.Security.KeyVault.Administration.KeyVaultBackupClient.StartRestoreAsync(System.Uri,System.String,System.Threading.CancellationToken)" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client" /> or <paramref name="response" /> is null.</exception>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.#ctor(`2,Azure.Response,Azure.Security.KeyVault.Administration.KeyVaultBackupClient)">
            <summary>
            Initializes a new instance of a RestoreOperation for mocking purposes.
            </summary>
            <param name="value">The response value that will be used to populate various properties.</param>
            <param name="response">The <see cref="T:Azure.Response" /> that will be returned from <see cref="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.GetRawResponse" />.</param>
            <param name="client">An instance of <see cref="T:Azure.Security.KeyVault.Administration.KeyVaultBackupClient" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> or <paramref name="response" /> or <paramref name="client" /> is null.</exception>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.StartTime">
            <summary>
            The start time of the restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.EndTime">
            <summary>
            The end time of the restore operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.Error">
            <summary>
            The error value resturned by the service call.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.Administration.RestoreOperationInternal`3.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequestAsync(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param><returns>The <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequest(Azure.Core.HttpMessage)">
            <summary>
            Executes before <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.ProcessAsync(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> or
            <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.Process(Azure.Core.HttpMessage,System.ReadOnlyMemory{Azure.Core.Pipeline.HttpPipelinePolicy})" /> is called.
            Implementers of this method are expected to call <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequest(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" /> or <see cref="M:Azure.Core.Pipeline.BearerTokenAuthenticationPolicy.AuthenticateAndAuthorizeRequestAsync(Azure.Core.HttpMessage,Azure.Core.TokenRequestContext)" />
            if authorization is required for requests not related to handling a challenge response.
            </summary><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> this policy would be applied to.</param>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequestOnChallengeAsync(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="M:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.AuthorizeRequestOnChallenge(Azure.Core.HttpMessage)">
            <summary>
            Executed in the event a 401 response with a WWW-Authenticate authentication challenge header is received after the initial request.
            </summary><remarks>Service client libraries may override this to handle service specific authentication challenges.</remarks><param name="message">The <see cref="T:Azure.Core.HttpMessage" /> to be authenticated.</param><returns>A boolean indicating whether the request was successfully authenticated and should be sent to the transport.</returns>
        </member>
        <member name="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.AuthorizationUri">
            <summary>
            Gets the "authorization" or "authorization_uri" parameter from the challenge response.
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.Scopes">
            <summary>
            Gets the "resource" or "scope" parameter from the challenge response. This should end with "/.default".
            </summary>
        </member>
        <member name="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.TenantId">
            <summary>
            Gets the tenant ID from <see cref="P:Azure.Security.KeyVault.ChallengeBasedAuthenticationPolicy.ChallengeParameters.AuthorizationUri" />.
            </summary>
        </member>
        <member name="T:Azure.Core.ArrayBufferWriter`1">
            <summary>
            Represents a heap-based, array-backed output sink into which <typeparam name="T" /> data can be written.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with the default initial capacity.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.#ctor(System.Int32)">
            <summary>
            Creates an instance of an <see cref="T:Azure.Core.ArrayBufferWriter`1" />, in which data can be written to,
            with an initial capacity specified.
            </summary>
            <param name="initialCapacity">The minimum capacity with which to initialize the underlying buffer.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="initialCapacity" /> is not positive (i.e. less than or equal to 0).
            </exception>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenMemory">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlyMemory`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenSpan">
            <summary>
            Returns the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1" />.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.WrittenCount">
            <summary>
            Returns the amount of data written to the underlying buffer so far.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.Capacity">
            <summary>
            Returns the total amount of space within the underlying buffer.
            </summary>
        </member>
        <member name="P:Azure.Core.ArrayBufferWriter`1.FreeCapacity">
            <summary>
            Returns the amount of space available that can still be written into without forcing the underlying buffer to grow.
            </summary>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Clear">
            <summary>
            Clears the data written to the underlying buffer.
            </summary>
            <remarks>
            You must clear the <see cref="T:Azure.Core.ArrayBufferWriter`1" /> before trying to re-use it.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.Advance(System.Int32)">
            <summary>
            Notifies <see cref="T:System.Buffers.IBufferWriter`1" /> that <paramref name="count" /> amount of data was written to the output <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="count" /> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown when attempting to advance past the end of the underlying buffer.
            </exception>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetMemory(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Memory`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Memory`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="M:Azure.Core.ArrayBufferWriter`1.GetSpan(System.Int32)">
            <summary>
            Returns a <see cref="T:System.Span`1" /> to write to that is at least the requested length (specified by <paramref name="sizeHint" />).
            If no <paramref name="sizeHint" /> is provided (or it's equal to <code>0</code>), some non-empty buffer is returned.
            </summary>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="sizeHint" /> is negative.
            </exception>
            <remarks>
            This will never return an empty <see cref="T:System.Span`1" />.
            </remarks>
            <remarks>
            There is no guarantee that successive calls will return the same buffer or the same-sized buffer.
            </remarks>
            <remarks>
            You must request a new buffer after calling Advance to continue writing more data and cannot write to a previously acquired buffer.
            </remarks>
        </member>
        <member name="T:Azure.Core.AuthorizationChallengeParser">
            <summary>
            A helper class for parsing Authorization challenge headers.
            </summary>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.GetChallengeParameterFromResponse(Azure.Response,System.String,System.String)">
            <summary>
            Parses the specified parameter from a challenge hearder found in the specified <see cref="T:Azure.Response" />.
            </summary>
            <param name="response">The <see cref="T:Azure.Response" /> to parse.</param>
            <param name="challengeScheme">The challenge scheme containing the <paramref name="challengeParameter" />. For example: "Bearer"</param>
            <param name="challengeParameter">The parameter key name containing the value to return.</param>
            <returns>The value of the parameter name specified in <paramref name="challengeParameter" /> if it is found in the specified <paramref name="challengeScheme" />.</returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)">
            <summary>
            Iterates through the challenge schemes present in a challenge header.
            </summary>
            <param name="headerValue">
            The header value which will be sliced to remove the first parsed <paramref name="challengeKey" />.
            </param>
            <param name="challengeKey">The parsed challenge scheme.</param>
            <returns>
            <c>true</c> if a challenge scheme was successfully parsed.
            The value of <paramref name="headerValue" /> should be passed to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)" /> to parse the challenge parameters if <c>true</c>.
            </returns>
        </member>
        <member name="M:Azure.Core.AuthorizationChallengeParser.TryGetNextParameter(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@,System.Char)">
            <summary>
            Iterates through a challenge header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.
            </summary>
            <param name="headerValue">The header value after being parsed by <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" />.</param>
            <param name="paramKey">The parsed challenge parameter key.</param>
            <param name="paramValue">The parsed challenge parameter value.</param>
            <param name="separator">The challenge parameter key / value pair separator. The default is '='.</param>
            <returns>
            <c>true</c> if the next available challenge parameter was successfully parsed.
            <c>false</c> if there are no more parameters for the current challenge scheme or an additional challenge scheme was encountered in the <paramref name="headerValue" />.
            The value of <paramref name="headerValue" /> should be passed again to <see cref="M:Azure.Core.AuthorizationChallengeParser.TryGetNextChallenge(System.ReadOnlySpan{System.Char}@,System.ReadOnlySpan{System.Char}@)" /> to attempt to parse any additional challenge schemes if <c>false</c>.
            </returns>
        </member>
        <member name="T:Azure.Core.AzureResourceProviderNamespaceAttribute">
            <summary>
            This attribute should be set on all client assemblies with value of one of the resource providers
            from the https://docs.microsoft.com/azure/azure-resource-manager/management/azure-services-resource-providers list.
            </summary>
        </member>
        <member name="T:Azure.Core.HashCodeBuilder">
            <summary>
            Copied from https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/HashCode.cs.
            </summary>
        </member>
        <member name="M:Azure.Core.Base64Url.Decode(System.String)">
            <summary> Converts a Base64URL encoded string to a string.</summary>
            <param name="encoded">The Base64Url encoded string containing UTF8 bytes for a string.</param>
            <returns>The string represented by the Base64URL encoded string.</returns>
        </member>
        <member name="M:Azure.Core.Base64Url.Encode(System.Byte[])">
            <summary>Encode a byte array as a Base64URL encoded string.</summary>
            <param name="bytes">Raw byte input buffer.</param>
            <returns>The bytes, encoded as a Base64URL string.</returns>
        </member>
        <member name="M:Azure.Core.Base64Url.DecodeString(System.String)">
            <summary> Converts a Base64URL encoded string to a string.</summary>
            <param name="encoded">The Base64Url encoded string containing UTF8 bytes for a string.</param>
            <returns>The string represented by the Base64URL encoded string.</returns>
        </member>
        <member name="M:Azure.Core.Base64Url.EncodeString(System.String)">
            <summary>Encode a string as a Base64URL encoded string.</summary>
            <param name="value">String input buffer.</param>
            <returns>The UTF8 bytes for the string, encoded as a Base64URL string.</returns>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Usage">
            <summary>
            Gets or sets a coma separated list of additional model usage modes. Allowed values: model, error, intput, output.
            </summary>
        </member>
        <member name="P:Azure.Core.CodeGenModelAttribute.Formats">
            <summary>
            Gets or sets a coma separated list of additional model serialization formats.
            </summary>
        </member>
        <member name="P:Azure.Core.LowLevelFuncOperation`1.Id">
            <summary>
            Gets an ID representing the operation that can be used to poll for
            the status of the long-running operation.
            </summary>
        </member>
        <member name="P:Azure.Core.LowLevelFuncOperation`1.Value">
            <summary>
            Final result of the long-running operation.
            </summary><remarks>
            This property can be accessed only after the operation completes successfully (HasValue is true).
            </remarks>
        </member>
        <member name="P:Azure.Core.LowLevelFuncOperation`1.HasCompleted">
            <summary>
            Returns true if the long-running operation completed.
            </summary>
        </member>
        <member name="P:Azure.Core.LowLevelFuncOperation`1.HasValue">
            <summary>
            Returns true if the long-running operation completed successfully and has produced final result (accessible by Value property).
            </summary>
        </member>
        <member name="M:Azure.Core.LowLevelFuncOperation`1.GetRawResponse">
            <summary>
            The last HTTP response received from the server.
            </summary><remarks>
            The last response returned from the server during the lifecycle of this instance.
            An instance of <see cref="T:Azure.Operation`1" /> sends requests to a server in UpdateStatusAsync, UpdateStatus, and other methods.
            Responses from these requests can be accessed using GetRawResponse.
            </remarks>
        </member>
        <member name="M:Azure.Core.LowLevelFuncOperation`1.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.LowLevelFuncOperation`1.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get updated status of the long-running operation.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the service call.</param><returns>The HTTP response received from the server.</returns><remarks>
            This operation will update the value returned from GetRawResponse and might update HasCompleted.
            </remarks>
        </member>
        <member name="M:Azure.Core.LowLevelFuncOperation`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.LowLevelFuncOperation`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls the server till the long-running operation completes.
            </summary><param name="pollingInterval">
            The interval between status requests to the server.
            The interval can change based on information returned from the server.
            For example, the server might communicate to the client that there is not reason to poll for status change sooner than some time.
            </param><param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> used for the periodical service calls.</param><returns>The last HTTP response received from the server.</returns><remarks>
            This method will periodically call UpdateStatusAsync till HasCompleted is true, then return the final result of the operation.
            </remarks>
        </member>
        <member name="M:Azure.Core.LowLevelPageableHelpers.BuildPageForResponse(Azure.Response,System.String,System.String)">
            <summary>
            Returns a <see cref="T:Azure.Page`1" /> for a given response.
            </summary>
            <param name="response"></param>
            <param name="itemPropertyName"></param>
            <param name="nextLinkPropertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Azure.Core.OperationInternals">
            <summary>
            This implements the ARM scenarios for LROs. It is highly recommended to read the ARM spec prior to modifying this code:
            https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#asynchronous-operations
            Other reference documents include:
            https://github.com/Azure/autorest/blob/master/docs/extensions/readme.md#x-ms-long-running-operation
            https://github.com/Azure/adx-documentation-pr/blob/master/sdks/LRO/LRO_AzureSDK.md
            </summary>
        </member>
        <member name="T:Azure.Core.OperationInternals`1">
            <summary>
            This implements the ARM scenarios for LROs. It is highly recommended to read the ARM spec prior to modifying this code:
            https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#asynchronous-operations
            Other reference documents include:
            https://github.com/Azure/autorest/blob/master/docs/extensions/readme.md#x-ms-long-running-operation
            https://github.com/Azure/adx-documentation-pr/blob/master/sdks/LRO/LRO_AzureSDK.md
            </summary>
            <typeparam name="T">The final result of the LRO.</typeparam>
        </member>
        <member name="T:Azure.Core.OperationOrResponseInternals">
            <summary>
            This implements the ARM scenarios for LROs. It is highly recommended to read the ARM spec prior to modifying this code:
            https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#asynchronous-operations
            Other reference documents include:
            https://github.com/Azure/autorest/blob/master/docs/extensions/readme.md#x-ms-long-running-operation
            https://github.com/Azure/adx-documentation-pr/blob/master/sdks/LRO/LRO_AzureSDK.md
            </summary>
        </member>
        <member name="T:Azure.Core.OperationOrResponseInternals`1">
            <summary>
            This implements the ARM scenarios for LROs. It is highly recommended to read the ARM spec prior to modifying this code:
            https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#asynchronous-operations
            Other reference documents include:
            https://github.com/Azure/autorest/blob/master/docs/extensions/readme.md#x-ms-long-running-operation
            https://github.com/Azure/adx-documentation-pr/blob/master/sdks/LRO/LRO_AzureSDK.md
            </summary>
            <typeparam name="T">The final result of the LRO.</typeparam>
        </member>
        <member name="T:Azure.Core.OperationInternal">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternal.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation,Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="M:Azure.Core.OperationInternal.SetState(Azure.Core.OperationState)">
            <summary>
            Sets the <see cref="T:Azure.Core.OperationInternal" /> state immediately.
            </summary>
            <param name="state">The <see cref="T:Azure.Core.OperationState" /> used to set <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /> and other members.</param>
        </member>
        <member name="T:Azure.Core.IOperation">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
        </member>
        <member name="M:Azure.Core.IOperation.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />
            don't need to be updated. Operation-specific properties, such as "<c>CreateOn</c>" or "<c>LastModified</c>",
            must be manually updated by the operation implementing this method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&gt; IOperation.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState.Failure(response.GetRawResponse());<br />
                return OperationState.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState.Success(Azure.Response)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationState.Success(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. If left <c>null</c>,
            a default exception is created based on the <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.RawResponse">
            <summary>
            The last HTTP response received from the server. Its update already handled in calls to "<c>UpdateStatus</c>" and
            "<c>WaitForCompletionAsync</c>", but custom methods not supported by this class, such as "<c>CancelOperation</c>",
            must update it as well.
            <example>Usage example:
            <code>
              public Response GetRawResponse() =&gt; _operationInternal.RawResponse;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternalBase.HasCompleted">
            <summary>
            Returns <c>true</c> if the long-running operation has completed.
            <example>Usage example:
            <code>
              public bool HasCompleted =&gt; _operationInternal.HasCompleted;
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&gt; UpdateStatusAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.UpdateStatusAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)">
            <summary>
            Calls the server to get the latest status of the long-running operation, handling diagnostic scope creation for distributed
            tracing. The default scope name can be changed with the "<c>operationTypeName</c>" parameter passed to the constructor.
            <example>Usage example:
            <code>
              public Response UpdateStatus(CancellationToken cancellationToken) =&gt; _operationInternal.UpdateStatus(cancellationToken);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The HTTP response received from the server.</returns>
            <remarks>
            After a successful run, this method will update <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> and might update <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" />.
            </remarks>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponseAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server. <strong></strong></param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternalBase.WaitForCompletionResponse(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="T:Azure.Core.OperationInternal`1">
            <summary>
            A helper class used to build long-running operation instances. In order to use this helper:
            <list type="number">
              <item>Make sure your LRO implements the <see cref="T:Azure.Core.IOperation`1" /> interface.</item>
              <item>Add a private <see cref="T:Azure.Core.OperationInternal`1" /> field to your LRO, and instantiate it during construction.</item>
              <item>Delegate method calls to the <see cref="T:Azure.Core.OperationInternal`1" /> implementations.</item>
            </list>
            Supported members:
            <list type="bullet">
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.HasValue" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternal`1.Value" /></description>
              </item>
              <item>
                <description><see cref="P:Azure.Core.OperationInternalBase.RawResponse" />, used for <see cref="M:Azure.Operation.GetRawResponse" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)" /></description>
              </item>
              <item>
                <description><see cref="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)" /></description>
              </item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.#ctor(Azure.Core.Pipeline.ClientDiagnostics,Azure.Core.IOperation{`0},Azure.Response,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},Azure.Core.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Azure.Core.OperationInternal`1" /> class.
            </summary>
            <param name="clientDiagnostics">Used for diagnostic scope and exception creation. This is expected to be the instance created during the construction of your main client.</param>
            <param name="operation">The long-running operation making use of this class. Passing "<c>this</c>" is expected.</param>
            <param name="rawResponse">
            The initial value of <see cref="P:Azure.Core.OperationInternalBase.RawResponse" />. Usually, long-running operation objects can be instantiated in two ways:
            <list type="bullet">
              <item>
              When calling a client's "<c>Start&lt;OperationName&gt;</c>" method, a service call is made to start the operation, and an <see cref="T:Azure.Operation`1" /> instance is returned.
              In this case, the response received from this service call can be passed here.
              </item>
              <item>
              When a user instantiates an <see cref="T:Azure.Operation`1" /> directly using a public constructor, there's no previous service call. In this case, passing <c>null</c> is expected.
              </item>
            </list>
            </param>
            <param name="operationTypeName">
            The type name of the long-running operation making use of this class. Used when creating diagnostic scopes. If left <c>null</c>, the type name will be inferred based on the
            parameter <paramref name="operation" />.
            </param>
            <param name="scopeAttributes">The attributes to use during diagnostic scope creation.</param>
            <param name="fallbackStrategy">The fallback delay strategy when Retry-After header is not present.  When it is present, the longer of the two delays will be used. Default is <see cref="T:Azure.Core.ConstantDelayStrategy" />.</param>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.HasValue">
            <summary>
            Returns <c>true</c> if the long-running operation completed successfully and has produced a final result.
            <example>Usage example:
            <code>
              public bool HasValue =&gt; _operationInternal.HasValue;
            </code>
            </example>
            </summary>
        </member>
        <member name="P:Azure.Core.OperationInternal`1.Value">
            <summary>
            The final result of the long-running operation.
            <example>Usage example:
            <code>
              public T Value =&gt; _operationInternal.Value;
            </code>
            </example>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the operation has not completed yet.</exception>
            <exception cref="T:Azure.RequestFailedException">Thrown when the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then used as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletionAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatusAsync(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the parameter <paramref name="pollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <paramref name="pollingInterval" />
            parameter and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(pollingInterval, cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes.
            After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed.  The maximum of the retry after value and the fallback <see cref="T:Azure.Core.DelayStrategy" />
            is then use as the wait interval.
            Headers supported are: "Retry-After", "retry-after-ms", and "x-ms-retry-after-ms",
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.WaitForCompletion(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Periodically calls <see cref="M:Azure.Core.OperationInternalBase.UpdateStatus(System.Threading.CancellationToken)" /> until the long-running operation completes. The interval
            between calls is defined by the property <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />, but it can change based on information returned
            from the server. After each service call, a retry-after header may be returned to communicate that there is no reason to poll
            for status change until the specified time has passed. In this case, the maximum value between the <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" />
            property and the retry-after header is chosen as the wait interval. Headers supported are: "Retry-After", "retry-after-ms",
            and "x-ms-retry-after-ms".
            <example>Usage example:
            <code>
              public async ValueTask&lt;Response&lt;T&gt;&gt; WaitForCompletionAsync(CancellationToken cancellationToken) =&gt;
                await _operationInternal.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
            </code>
            </example>
            </summary>
            <param name="pollingInterval">The interval between status requests to the server.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>The last HTTP response received from the server, including the final result of the long-running operation.</returns>
            <exception cref="T:Azure.RequestFailedException">Thrown if there's been any issues during the connection, or if the operation has completed with failures.</exception>
        </member>
        <member name="M:Azure.Core.OperationInternal`1.SetState(Azure.Core.OperationState{`0})">
            <summary>
            Sets the <see cref="T:Azure.Core.OperationInternal`1" /> state immediately.
            </summary>
            <param name="state">The <see cref="T:Azure.Core.OperationState`1" /> used to set <see cref="P:Azure.Core.OperationInternalBase.HasCompleted" /> and other members.</param>
        </member>
        <member name="T:Azure.Core.IOperation`1">
            <summary>
            An interface used by <see cref="T:Azure.Core.OperationInternal`1" /> for making service calls and updating state. It's expected that
            your long-running operation classes implement this interface.
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.IOperation`1.UpdateStateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Calls the service and updates the state of the long-running operation. Properties directly handled by the
            <see cref="T:Azure.Core.OperationInternal`1" /> class, such as <see cref="P:Azure.Core.OperationInternalBase.RawResponse" /> or
            <see cref="P:Azure.Core.OperationInternal`1.Value" />, don't need to be updated. Operation-specific properties, such
            as "<c>CreateOn</c>" or "<c>LastModified</c>", must be manually updated by the operation implementing this
            method.
            <example>Usage example:
            <code>
              async ValueTask&lt;OperationState&lt;T&gt;&gt; IOperation&lt;T&gt;.UpdateStateAsync(bool async, CancellationToken cancellationToken)<br />
              {<br />
                Response&lt;R&gt; response = async ? &lt;async service call&gt; : &lt;sync service call&gt;;<br />
                if (&lt;operation succeeded&gt;) return OperationState&lt;T&gt;.Success(response.GetRawResponse(), &lt;parse response&gt;);<br />
                if (&lt;operation failed&gt;) return OperationState&lt;T&gt;.Failure(response.GetRawResponse());<br />
                return OperationState&lt;T&gt;.Pending(response.GetRawResponse());<br />
              }
            </code>
            </example>
            </summary>
            <param name="async"><c>true</c> if the call should be executed asynchronously. Otherwise, <c>false</c>.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> controlling the request lifetime.</param>
            <returns>
            A structure indicating the current operation state. The <see cref="T:Azure.Core.OperationState`1" /> structure must be instantiated by one of
            its static methods:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </returns>
        </member>
        <member name="T:Azure.Core.OperationState`1">
            <summary>
            A helper structure passed to <see cref="T:Azure.Core.OperationInternal`1" /> to indicate the current operation state. This structure must be
            instantiated by one of its static methods, depending on the operation state:
            <list type="bullet">
              <item>Use <see cref="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)" /> when the operation has completed successfully.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)" /> when the operation has completed with failures.</item>
              <item>Use <see cref="M:Azure.Core.OperationState`1.Pending(Azure.Response)" /> when the operation has not completed yet.</item>
            </list>
            </summary>
            <typeparam name="T">The final result of the long-running operation. Must match the type used in <see cref="T:Azure.Operation`1" />.</typeparam>
        </member>
        <member name="M:Azure.Core.OperationState`1.Success(Azure.Response,`0)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed successfully.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="value">The final result of the long-running operation.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> or <paramref name="value" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Failure(Azure.Response,Azure.RequestFailedException)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has completed with failures.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <param name="operationFailedException">
            The exception to throw from <c>UpdateStatus</c> because of the operation failure. The same exception will be thrown when
            <see cref="P:Azure.Core.OperationInternal`1.Value" /> is called. If left <c>null</c>, a default exception is created based on the
            <paramref name="rawResponse" /> parameter.
            </param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Azure.Core.OperationState`1.Pending(Azure.Response)">
            <summary>
            Instantiates an <see cref="T:Azure.Core.OperationState`1" /> indicating the operation has not completed yet.
            </summary>
            <param name="rawResponse">The HTTP response obtained during the status update.</param>
            <returns>A new <see cref="T:Azure.Core.OperationState`1" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="rawResponse" /> is <c>null</c>.</exception>
        </member>
        <member name="T:Azure.Core.DelayStrategy">
            <summary>
            Strategy to control delay behavior.
            </summary>
        </member>
        <member name="M:Azure.Core.DelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the interval of next delay iteration.
            </summary>
            <remarks> Note that the value could change per call. </remarks>
            <param name="response"> Server response. </param>
            <param name="suggestedInterval"> Suggested pollingInterval. It is up to strategy
            implementation to decide how to deal with this parameter. </param>
            <returns> Delay interval of next iteration. </returns>
        </member>
        <member name="T:Azure.Core.ConstantDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> with constant polling interval.
            </summary>
            <remarks>Polling interval is always equal to the given polling interval.</remarks>
        </member>
        <member name="M:Azure.Core.ConstantDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of <see cref="F:Azure.Core.ConstantDelayStrategy.DefaultPollingInterval" /> and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.ExponentialDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" />. Polling interval changes according to
            the sequence {1, 1, 1, 2, 4, ...32}.
            </summary>
            <remarks>Polling interval always follows the given sequence.</remarks>
        </member>
        <member name="M:Azure.Core.ExponentialDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from {1, 1, 1, 2, 4, ...32}.
            </summary>
            <param name="response">Service response.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
        </member>
        <member name="T:Azure.Core.RetryAfterDelayStrategy">
            <summary>
            Implementation of a <see cref="T:Azure.Core.DelayStrategy" /> of which the interval is from
            retry-after header of service response.
            </summary>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.#ctor(Azure.Core.DelayStrategy)">
            <summary>
            Create a <see cref="T:Azure.Core.RetryAfterDelayStrategy" /> with a default retry-after value which normally
            comes from the initial response of an LRO operation.
            </summary>
            <param name="fallbackStrategy"> Fallback strategy if retry after is not present. </param>
        </member>
        <member name="M:Azure.Core.RetryAfterDelayStrategy.GetNextDelay(Azure.Response,System.Nullable{System.TimeSpan})">
            <summary>
            Get the polling interval from the max value of retry-after header of given service response and <paramref name="suggestedInterval" />.
            If retry-after header is not found, adopt the value of last retry-after header.
            </summary>
            <param name="response">Service response which might carry retry-after header.</param>
            <param name="suggestedInterval">Suggested pollingInterval.</param>
            <returns>Max value of retry-after header and <paramref name="suggestedInterval" />.</returns>
        </member>
        <member name="T:Azure.Core.OperationPoller">
            <summary>
            Implementation of LRO polling logic.
            </summary>
        </member>
        <member name="M:Azure.Core.Pipeline.ClientDiagnostics.ExtractFailureContent(System.String,Azure.Core.ResponseHeaders,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
            Partial method that can optionally be defined to extract the error
            message, code, and details in a service specific manner.
            </summary>
            <param name="content">The error content.</param>
            <param name="responseHeaders">The response headers.</param>
            <param name="additionalInfo">Additional error details.</param>
        </member>
        <member name="T:Azure.Core.Pipeline.DiagnosticScope.ActivityKind">
            <summary>
            Kind describes the relationship between the Activity, its parents, and its children in a Trace.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Internal">
            <summary>
            Default value.
            Indicates that the Activity represents an internal operation within an application, as opposed to an operations with remote parents or children.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Server">
            <summary>
            Server activity represents request incoming from external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Client">
            <summary>
            Client activity represents outgoing request to the external component.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Producer">
            <summary>
            Producer activity represents output provided to external components.
            </summary>
        </member>
        <member name="F:Azure.Core.Pipeline.DiagnosticScope.ActivityKind.Consumer">
            <summary>
            Consumer activity represents output received from an external component.
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.ActivityExtensions">
            <summary>
            Until we can reference the 5.0 of System.Diagnostics.DiagnosticSource
            </summary>
        </member>
        <member name="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1">
            <summary>
            Both <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerable`1" /> and <see cref="T:Azure.Core.Pipeline.TaskExtensions.Enumerator`1" /> are defined as public structs so that foreach can use duck typing
            to call <see cref="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.GetEnumerator" /> and avoid heap memory allocation.
            Please don't delete this method and don't make these types private.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Azure.Core.Argument">
            <summary>
            Argument validation.
            </summary>
            <remarks>
              <para>This class should be shared via source using Azure.Core.props and contain only common argument validation.
                It is declared partial so that you can use the same familiar class name but extend it with project-specific validation.
                To extend the functionality of this class, just declare your own partial <see cref="T:Azure.Core.Argument" /> class with project-specific methods.
              </para>
              <para>
                Be sure to document exceptions thrown by these methods on your public methods.
              </para>
            </remarks>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNull``1(System.Nullable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty collection.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty collection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null, an empty string, or consists only of white-space characters.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string or consists only of white-space characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNotDefault``1(``0@,System.String)">
            <summary>
            Throws if <paramref name="value" /> is the default value for type <typeparamref name="T" />.
            </summary>
            <typeparam name="T">The type of structure to validate which implements <see cref="T:System.IEquatable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is the default value for type <typeparamref name="T" />.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertInRange``1(``0,``0,``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> is less than the <paramref name="minimum" /> or greater than the <paramref name="maximum" />.
            </summary>
            <typeparam name="T">The type of to validate which implements <see cref="T:System.IComparable`1" />.</typeparam>
            <param name="value">The value to validate.</param>
            <param name="minimum">The minimum value to compare.</param>
            <param name="maximum">The maximum value to compare.</param>
            <param name="name">The name of the parameter.</param>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNull``1(``0,System.String)">
            <summary>
            Throws if <paramref name="value" /> has not been initialized; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> has not been initialized.</exception>
        </member>
        <member name="M:Azure.Core.Argument.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is null or an empty string; otherwise, returns <paramref name="value" />.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is an empty string.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="M:Azure.Core.Argument.AssertNull``1(``0,System.String,System.String)">
            <summary>
            Throws if <paramref name="value" /> is not null.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="name">The name of the parameter.</param>
            <param name="message">The error message.</param>
            <exception cref="T:System.ArgumentException"><paramref name="value" /> is not null.</exception>
        </member>
        <member name="T:Azure.Core.AppContextSwitchHelper">
            <summary>
            Helper for interacting with AppConfig settings and their related Environment variable settings.
            </summary>
        </member>
        <member name="M:Azure.Core.AppContextSwitchHelper.GetConfigValue(System.String,System.String)">
            <summary>
            Determines if either an AppContext switch or its corresponding Environment Variable is set
            </summary>
            <param name="appContexSwitchName">Name of the AppContext switch.</param>
            <param name="environmentVariableName">Name of the Environment variable.</param>
            <returns>If the AppContext switch has been set, returns the value of the switch.
            If the AppContext switch has not been set, returns the value of the environment variable.
            False if neither is set.
            </returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
            <summary>Gets an enumerable collection that contains the keys in the read-only dictionary.</summary><returns>An enumerable collection that contains the keys in the read-only dictionary.</returns>
        </member>
        <member name="P:Azure.Core.ChangeTrackingDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
            <summary>Gets an enumerable collection that contains the values in the read-only dictionary.</summary><returns>An enumerable collection that contains the values in the read-only dictionary.</returns>
        </member>
        <member name="M:Azure.Core.ChangeTrackingList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary><returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Azure.Core.Pipeline.TaskExtensions.Enumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary><returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Azure.Core.Pipeline.TaskExtensions.Enumerator`1.System#Collections#IEnumerator#Current">
            <summary>Gets the element in the collection at the current position of the enumerator.</summary><returns>The element in the collection at the current position of the enumerator.</returns>
        </member>
    </members>
</doc>
